// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package generated

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GosoanSensorEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsGosoanSensorEvent(buf []byte, offset flatbuffers.UOffsetT) *GosoanSensorEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GosoanSensorEvent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGosoanSensorEvent(buf []byte, offset flatbuffers.UOffsetT) *GosoanSensorEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GosoanSensorEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GosoanSensorEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GosoanSensorEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GosoanSensorEvent) SensorType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GosoanSensorEvent) MutateSensorType(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *GosoanSensorEvent) SensorName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GosoanSensorEvent) Values(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *GosoanSensorEvent) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GosoanSensorEvent) MutateValues(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *GosoanSensorEvent) Accuracy() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GosoanSensorEvent) MutateAccuracy(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *GosoanSensorEvent) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GosoanSensorEvent) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func GosoanSensorEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GosoanSensorEventAddSensorType(builder *flatbuffers.Builder, sensorType int32) {
	builder.PrependInt32Slot(0, sensorType, 0)
}
func GosoanSensorEventAddSensorName(builder *flatbuffers.Builder, sensorName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sensorName), 0)
}
func GosoanSensorEventAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(values), 0)
}
func GosoanSensorEventStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GosoanSensorEventAddAccuracy(builder *flatbuffers.Builder, accuracy int32) {
	builder.PrependInt32Slot(3, accuracy, 0)
}
func GosoanSensorEventAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(4, timestamp, 0)
}
func GosoanSensorEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
