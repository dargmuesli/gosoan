// automatically generated by the FlatBuffers compiler, do not modify

package de.jonas_thelemann.uni.gosoan.generated

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class GosoanSensorEventFB : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GosoanSensorEventFB {
        __init(_i, _bb)
        return this
    }
    val sensorType : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val sensorName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val sensorNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun sensorNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    fun values(j: Int) : Float {
        val o = __offset(8)
        return if (o != 0) {
            bb.getFloat(__vector(o) + j * 4)
        } else {
            0.0f
        }
    }
    val valuesLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val valuesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 4)
    fun valuesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 4)
    val accuracy : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val timestamp : Long
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsGosoanSensorEventFB(_bb: ByteBuffer): GosoanSensorEventFB = getRootAsGosoanSensorEventFB(_bb, GosoanSensorEventFB())
        fun getRootAsGosoanSensorEventFB(_bb: ByteBuffer, obj: GosoanSensorEventFB): GosoanSensorEventFB {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGosoanSensorEventFB(builder: FlatBufferBuilder, sensorType: Int, sensorNameOffset: Int, valuesOffset: Int, accuracy: Int, timestamp: Long) : Int {
            builder.startTable(5)
            addTimestamp(builder, timestamp)
            addAccuracy(builder, accuracy)
            addValues(builder, valuesOffset)
            addSensorName(builder, sensorNameOffset)
            addSensorType(builder, sensorType)
            return endGosoanSensorEventFB(builder)
        }
        fun startGosoanSensorEventFB(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addSensorType(builder: FlatBufferBuilder, sensorType: Int) = builder.addInt(0, sensorType, 0)
        fun addSensorName(builder: FlatBufferBuilder, sensorName: Int) = builder.addOffset(1, sensorName, 0)
        fun addValues(builder: FlatBufferBuilder, values: Int) = builder.addOffset(2, values, 0)
        fun createValuesVector(builder: FlatBufferBuilder, data: FloatArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addFloat(data[i])
            }
            return builder.endVector()
        }
        fun startValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAccuracy(builder: FlatBufferBuilder, accuracy: Int) = builder.addInt(3, accuracy, 0)
        fun addTimestamp(builder: FlatBufferBuilder, timestamp: Long) = builder.addLong(4, timestamp, 0L)
        fun endGosoanSensorEventFB(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishGosoanSensorEventFBBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedGosoanSensorEventFBBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
